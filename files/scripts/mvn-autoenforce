#!/usr/bin/env python3
'''
Find the highest version of all dependencies in the output from Maven enforcer.
'''

import sys
import re


def parse_version(version):
    result = []
    for part in version.split('.'):
        try:
            result.append(int(part))
        except:
            result.append(part)
    return result


def parse_dependency(dependency_str):
    group_id, artifact_id, version = dependency_str.split(':')
    return {
        'group_id': group_id,
        'artifact_id': artifact_id,
        'version': parse_version(version),
    }


def find_highest_version(dependency, enforcer_output):
    version_pattern = re.compile(
        '{group_id}:{artifact_id}:(\\S+)'.format(
            group_id=dependency['group_id'],
            artifact_id=dependency['artifact_id']))
    return max(
        parse_version(version)
        for version in re.findall(version_pattern, enforcer_output))


def format_version(version):
    return '.'.join(map(str, version))


def to_xml(dependency):
    return '''
<dependency>
  <groupId>{group_id}</groupId>
  <artifactId>{artifact_id}</artifactId>
  <version>{version}</version>
</dependency>
    '''.format(
        group_id=dependency['group_id'],
        artifact_id=dependency['artifact_id'],
        version=format_version(dependency['version'])).strip()


def main():
    enforcer_output = sys.stdin.read()
    dependency_pattern = re.compile(
        'Require upper bound dependencies error for '
        '(.*) '
        'paths to dependency are:')
    dependencies = [
        parse_dependency(dependency_str)
        for dependency_str in re.findall(dependency_pattern, enforcer_output)
    ]
    resolved_dependencies = [
        {
            'group_id': dependency['group_id'],
            'artifact_id': dependency['artifact_id'],
            'version': find_highest_version(dependency, enforcer_output),
        }
        for dependency in dependencies
    ]
    print('\n\n'.join(
        to_xml(dependency)
        for dependency in sorted(
            resolved_dependencies,
            key=lambda d: (d['group_id'], d['artifact_id']))))


if __name__ == '__main__':
    main()
